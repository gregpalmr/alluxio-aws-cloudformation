---
### FILE: deploy-alluxio-on-aws.yaml
### 
### 
###  USAGE: see http://github.com/gregpalmr/alluxio-aws-cloudformation
### 
### 
###  Author: gregpalmr@gmail.com
### 
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Alluxio Enterprise Edition Deployment on AWS'
Parameters:
  keypairName:
    Type: AWS::EC2::KeyPair::KeyName
    AllowedPattern: ".+"
    ConstraintDescription: Must select an existing EC2 KeyPair
    Description: "AWS key pair to use to SSH to the VMs. SSH username for the VMs are centos (has sudo privilege). SSH into machines for changing configuration, reviewing logs, etc."
  clusterSize:
    Type: String
    Description: "The type and number of machines are chosen based on the size selected."
    AllowedValues:
      - "Single-Node"
      - "1-worker"
      - "3-workers"
      - "5-workers"
      - "10-workers"
      - "25-workers"
      - "50-workers"
    Default: "3-workers"
  useVPC:
    Type: AWS::EC2::VPC::Id
    Description: "VPC to deploy the cluster into."
  useSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: "Subnet to deploy the cluster into. Must be in the selected VPC."
  securityGroupInboundSourceCidr:
    Type: String
    Description: "The CIDR that represents that ip address range that can commicate with the Alluxio daemons via TCP ports."
  alluxioS3BucketName:
    Type: String
    Description: "An S3 bucket that Alluxio can use to store files."
    Default: ""
  alluxioInstallerDownloadURL:
    Type: String
    Description: "S3, HTTP or HTTPS URL to a Alluxio RPM. Leave empty to install the latest Alluxio CE release."
    Default: "https://downloads.alluxio.io/downloads/files/2.6.1/alluxio-2.6.1-bin.tar.gz"
  alluxioLicenseDownloadURL:
    Type: String
    Description: "S3, HTTP or HTTPS URL to an Alluxio license file. Leave empty if you are installing the Community Edition."
    Default: ""
  helperScriptsHttpLocation:
    Type: String
    Description: "The HTTP location of the cloudformation template's helper scripts"
    Default: "https://raw.githubusercontent.com/gregpalmr/alluxio-aws-cloudformation/main/cloudformation/scripts
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Alluxio Cluster
        Parameters:
          - masterInstanceType
          - masterCount
          - workerInstanceType
          - workerCount
          - clusterSize
          - useVPC
          - useSubnet
          - alluxioS3BucketName
          - alluxioInstallerDownloadURL
          - alluxioLicenseDownloadURL
          - helperScriptsHttpLocation
      -
        Label:
          default: AWS resource configuration
        Parameters:
          - keypairName
    ParameterLabels:
      keypairName:
        default : "AWS keypair to use for SSHing into EC2 instances"
      clusterSize:
        default: "Cluster size"
      useSubnet:
        default: "Deploy to Subnet"
      securityGroupInboundSourceCidr:
        default: "SG Inbound Source CIDR"
      useVPC:
        default: "Deploy to VPC"
      alluxioInstallerDownloadURL:
        default: "Alluxio installer download URL"
      alluxioLicenseDownloadURL:
        default: "Alluxio Enterprise Edition license file download URL"
      helperScriptsHttpLocation:
        default: "HTTP location for this template's helper scripts"
Mappings:
  Custom:
    Variables:
      INSTALLERURL: https://downloads.alluxio.io/downloads/files/2.9.3/alluxio-2.9.3-bin.tar.gz
  ClusterSizes:
    Single-Node:
      masterCount: 1
      masterInstanceType: r5d.4xlarge
      masterDiskSize: 300
      masterMaxMemory: 122880
      workerInstanceType: r5d.4xlarge
      workerCount: 0
      workerDiskSize: 100
      workerMaxMemory: 122880
      monitorDiskSize: 300
    1-worker:
      masterCount: 3
      masterInstanceType: m5.2xlarge
      masterDiskSize: 200
      masterMaxMemory: 28672
      workerInstanceType: r5d.4xlarge
      workerCount: 1
      workerDiskSize: 100
      workerMaxMemory: 122880
      monitorDiskSize: 300
    3-workers:
      masterCount: 3
      masterInstanceType: m5.2xlarge
      masterDiskSize: 200
      masterMaxMemory: 28672
      workerInstanceType: r5d.4xlarge
      workerCount: 3
      workerDiskSize: 100
      workerMaxMemory: 122880
      monitorDiskSize: 300
    5-workers:
      masterCount: 3
      masterInstanceType: m5.2xlarge
      masterDiskSize: 200
      masterMaxMemory: 28672
      workerInstanceType: r5d.4xlarge
      workerCount: 5
      workerDiskSize: 100
      workerMaxMemory: 122880
      monitorDiskSize: 300
    10-workers:
      masterCount: 3
      masterInstanceType: m5.4xlarge
      masterDiskSize: 200
      masterMaxMemory: 61440
      workerInstanceType: r5d.4xlarge
      workerCount: 10
      workerDiskSize: 100
      workerMaxMemory: 122880
      monitorDiskSize: 300
    25-workers:
      masterCount: 3
      masterInstanceType: m5.4xlarge
      masterDiskSize: 200
      masterMaxMemory: 61440
      workerInstanceType: r5d.4xlarge
      workerCount: 25
      workerDiskSize: 100
      workerMaxMemory: 122880
      monitorDiskSize: 300
    50-workers:
      masterCount: 3
      masterInstanceType: m5.4xlarge
      masterDiskSize: 200
      masterMaxMemory: 61440
      workerInstanceType: r5d.4xlarge
      workerCount: 50
      workerDiskSize: 100
      workerMaxMemory: 122880
      monitorDiskSize: 300
  RegionMap:
    # Amazon Linux 2023 Images
    us-east-1: # N Virginia
      AMI: ami-08a52ddb321b32a8c
    us-east-2: # Ohio
      AMI: ami-0ccabb5f82d4c9af5
    us-west-1: # California
      AMI: ami-09f67f6dc966a7829
    us-west-2: # Oregon
      AMI: ami-04e35eeae7a7c5883
    ca-central-1: # Québec
      AMI: ami-0baa3f62c0ca83387
    eu-central-1: # Frankfurt
      AMI: ami-0c4c4bd6cf0c5fe52
    eu-west-1: # Ireland
      AMI: ami-0ed752ea0f62749af 
    eu-west-2: # London
      AMI: ami-0f3d9639a5674d559
    eu-west-3: # Paris
      AMI: ami-07e67bd6b5d9fd892
    eu-north-1: # Stockholm
      AMI: ami-0cea4844b980fe49e
    ap-south-1 : # Mumbai
      AMI: ami-0da59f1af71ea4ad2
    ap-northeast-1: # Tokyo
      AMI: ami-04beabd6a4fb6ab6f
    ap-northeast-2: # Seoul
      AMI: ami-0f2ce0bfb34039f29
    ap-northeast-3: # Osaka
      AMI: ami-07a713e7842da99d4
    ap-southeast-1: # Singapore
      AMI: ami-091a58610910a87a9
    ap-southeast-2: # Sidney
      AMI: ami-0a709bebf4fa9246f
    sa-east-1: # São Paulo
      AMI: ami-0e379d98832a982f0
  SubnetConfig:
    VPC:
      CIDR: 10.0.15.0/16
    Public:
      CIDR: 10.0.15.0/24
Conditions:
  CreateVPC: !Equals [!Ref useSubnet, ""]
Resources:
  AlluxioIAMPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Join ["-", ["AlluxioIAMPolicy", !Ref "AWS::StackName"]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Sid: AllowAlluxioToSignalResources
            Effect: Allow
            Action:
              - cloudformation:SignalResource
            Resource: "*"
          -
            Sid: AllowAlluxioToDescribeInstances
            Effect: Allow
            Action:
              - ec2:DescribeInstances
            Resource: "*"
          -
            Sid: AllowAlluxioToGetS3BucketLocations
            Effect: Allow
            Action:
              - s3:GetEncryptionConfiguration
              - s3:GetBucketLocation
              - s3:ListAllMyBuckets
              - s3:HeadBucket
            Resource: "*"
          -
            Sid: AllowAlluxioToReadWriteToS3Buckets
            Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
            Resource: 
              - !Join [ "", [ 'arn:aws:s3:::', !Ref alluxioS3BucketName       ] ]
              - !Join [ "", [ 'arn:aws:s3:::', !Ref alluxioS3BucketName, '/*' ] ]

  AlluxioIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ["-", ["AlluxioIAMRole", !Ref "AWS::StackName"]]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Ref AlluxioIAMPolicy
  AlluxioInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Join ["-", ["InstanceProfileName", !Ref "AWS::StackName"]]
      Path: /
      Roles: 
        - !Ref AlluxioIAMRole
  VPC:
    Condition: CreateVPC
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !FindInMap [SubnetConfig, VPC, CIDR]
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref "AWS::StackName", "net"]]

  PublicSubnet:
    Condition: CreateVPC
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [SubnetConfig, Public, CIDR]
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref "AWS::StackName", "public"]]
      - Key: Network
        Value: Public

  InternetGateway:
    Condition: CreateVPC
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref "AWS::StackName", "ig"]]

  VPCGatewayAttachment:
    Condition: CreateVPC
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Condition: CreateVPC
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref "AWS::StackName", "public"]]

  PublicSubnetRouteTableAssociation:
    Condition: CreateVPC
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PublicRoute:
    Condition: CreateVPC
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: !Ref securityGroupInboundSourceCidr
      GatewayId: !Ref InternetGateway

  AlluxioSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Alluxio Access"
      VpcId: !If [CreateVPC, !Ref VPC, !Ref useVPC]
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '19999'
        ToPort: '19999'
        CidrIp: !Ref securityGroupInboundSourceCidr
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref securityGroupInboundSourceCidr
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: !Ref securityGroupInboundSourceCidr
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: !Ref securityGroupInboundSourceCidr
      - IpProtocol: tcp
        Description: "Prometheus Web Console"
        FromPort: '9090'
        ToPort: '9090'
        CidrIp: !Ref securityGroupInboundSourceCidr
      - IpProtocol: tcp
        Description: "Grafana Web Console"
        FromPort: '3000'
        ToPort: '3000'
        CidrIp: !Ref securityGroupInboundSourceCidr
  AvailabilityWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  AvailabilityWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: AlluxioMasterLC
    Properties:
      Handle: !Ref "AvailabilityWaitHandle"
      Timeout: "800"

  AlluxioSecurityGroupSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref AlluxioSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref AlluxioSecurityGroup

  AlluxioMasterLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      #EbsOptimized: true
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - AMI
      InstanceMonitoring: true
      InstanceType: !FindInMap [ClusterSizes, !Ref clusterSize, masterInstanceType]
      IamInstanceProfile: !Ref AlluxioInstanceProfile
      KeyName: !Ref keypairName
      SecurityGroups: [!Ref AlluxioSecurityGroup]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !FindInMap [ClusterSizes, !Ref clusterSize, masterDiskSize]
            DeleteOnTermination: true
            Encrypted: 'false'
            VolumeType: gp2
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -x
            #
            # Alluxio Master Node

            # The following command logs all stdout and stderr to a log file
            exec > >(tee /var/log/user-data.log|logger -t user-data -s >/dev/console) 2>&1

            statusFile=/tmp/statusfile

            # Download the helper scripts from the s3 bucket
            curl -sSLO ${HELPER_SCRIPTS_HTTP_LOCATION}/install-java.sh
            curl -sSLO ${HELPER_SCRIPTS_HTTP_LOCATION}/install-alluxio.sh
            curl -sSLO ${HELPER_SCRIPTS_HTTP_LOCATION}/install-prometheus.sh
            curl -sSLO ${HELPER_SCRIPTS_HTTP_LOCATION}/install-prometheus-node-exporter.sh
            curl -sSLO ${HELPER_SCRIPTS_HTTP_LOCATION}/install-grafana.sh
            if [ "$?" -ne "0" ]; then
              err_msg="Unable to download helper scripts from $HELPER_SCRIPTS_HTTP_LOCATION/"
              echo "{ \"Status\" : \"FAILURE\", \"UniqueId\" : \"${AWS::StackName}\", \"Data\" : \"Failed\", \"Reason\" : \"$err_msg\" }" > $statusFile
               curl -T $statusFile '${AvailabilityWaitHandle}'
               exit -1
            fi

            # Check if this is a single node cluster
            if [ ${WORKER_COUNT} == 0 ]; then
              echo "Single EC2 instance being staged"
            else
              echo "Multiple EC2 instances being staged"
            fi

            # Install Java 
            bash ./install-java.sh > /var/log/install-java.log 2>&1

            # Install Prometheus node_exporter for basic mem, cpu, disk, network stats
            bash ./install-prometheus-node-exporter.sh > /var/log/install-prometheus-node-exporter.log 2>&1

            # Create variables to be passed to scripts
            # Note: only use the IMDSv2 method, becuase the IMDSv1 is usually disabled
            # Get a token that lasts for 6 hours
            IMDSv2_TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
            THIS_INSTANCE_ID=$(curl -H "X-aws-ec2-metadata-token: $IMDSv2_TOKEN" http://instance-data/latest/meta-data/instance-id)
            THIS_IP_ADDRESS=$(curl -H "X-aws-ec2-metadata-token: $IMDSv2_TOKEN" http://instance-data/latest/meta-data/local-ipv4)
            THIS_NODE_TYPE=$(aws ec2 --region ${AWS::Region} describe-instances --instance-ids $THIS_INSTANCE_ID --query 'Reservations[].Instances[].Tags[?Key==`alluxio-node-type`].Value[]' --output text)

            # Install Alluxio
            echo "bash ./install-alluxio.sh $THIS_NODE_TYPE ${AWS::StackName} ${AWS::Region} ${ALLUXIO_S3_BUCKET_NAME} ${ALLUXIO_DOWNLOAD_URL} ${ALLUXIO_LICENSE_DOWNLOAD_URL} ${MASTER_HEAP_MEMORY_SIZE} ${WORKER_HEAP_MEMORY_SIZE} ${WORKER_COUNT}" 
            bash ./install-alluxio.sh "$THIS_NODE_TYPE" "${AWS::StackName}" "${AWS::Region}" "${ALLUXIO_S3_BUCKET_NAME}" "${ALLUXIO_DOWNLOAD_URL}" "${ALLUXIO_LICENSE_DOWNLOAD_URL}" "${MASTER_HEAP_MEMORY_SIZE}" "${WORKER_HEAP_MEMORY_SIZE}" "${WORKER_COUNT}" > /var/log/install-alluxio.log 2>&1

            if [ "$?" -ne 0 ]; then
              errmsg=" Script install-alluxio.sh failed. See log file at /var/log/install-alluxio.log." 
              echo " $errmsg"
              echo "{ \"Status\" : \"FAILURE\", \"UniqueId\" : \"${AWS::StackName}\", \"Data\" : \"Failed\", \"Reason\" : \"$errmsg\" }" > $statusFile
              curl -T $statusFile '${AvailabilityWaitHandle}'
              exit -1
            fi

            # Finalize install, send back status
            #
            until curl -Iks http://localhost:19999; do
              echo "Waiting for Alluxio master node Web UI availability"
              sleep 5
            done

            echo "{ \"Status\" : \"SUCCESS\", \"UniqueId\" : \"${AWS::StackName}\", \"Data\" : \"Ready\", \"Reason\" : \"Website Available\" }" > $statusFile
            curl -T $statusFile '${AvailabilityWaitHandle}'
            #aws cloudformation --region ${AWS::Region} signal-resource --stack-name ${AWS::StackName} --logical-resource-id AvailabilityWaitCondition --unique-id ${AWS::StackName} --status SUCCESS

          - HELPER_SCRIPTS_HTTP_LOCATION: !Ref helperScriptsHttpLocation
            INSTALLER_DOWNLOAD_URL: !FindInMap [ Custom, Variables, "INSTALLERURL"]
            MEMORY_SIZE: !FindInMap [ClusterSizes, !Ref clusterSize, masterMaxMemory]
            ALLUXIO_S3_BUCKET_NAME: !Ref alluxioS3BucketName
            MASTER_COUNT: !FindInMap [ClusterSizes, !Ref clusterSize, masterCount]
            WORKER_COUNT: !FindInMap [ClusterSizes, !Ref clusterSize, workerCount]
            ALLUXIO_LICENSE_DOWNLOAD_URL: !Ref alluxioLicenseDownloadUrl
            MASTER_HEAP_MEMORY_SIZE: !FindInMap [ClusterSizes, !Ref clusterSize, masterHeapSizeGb]
            WORKER_HEAP_MEMORY_SIZE: !FindInMap [ClusterSizes, !Ref clusterSize, workerHeapSizeGb]

  AlluxioMasterASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: AlluxioMasterLC
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName", Alluxio-Master]]
          PropagateAtLaunch: true
          ResourceType: "auto-scaling-group"
          ResourceId: !Ref "AWS::StackName"
      LaunchConfigurationName: !Ref AlluxioMasterLC
      VPCZoneIdentifier: [!If [CreateVPC, !Ref PublicSubnet, !Ref useSubnet]]
      DesiredCapacity: !FindInMap [ClusterSizes, !Ref clusterSize, masterCount]
      MaxSize: !FindInMap [ClusterSizes, !Ref clusterSize, masterCount]
      MinSize: !FindInMap [ClusterSizes, !Ref clusterSize, masterCount]

  AlluxioWorkerLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: AlluxioMasterASG
    Properties:
      AssociatePublicIpAddress: true
      #EbsOptimized: true
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - AMI
      InstanceMonitoring: true
      InstanceType: !FindInMap [ClusterSizes, !Ref clusterSize, workerInstanceType]
      IamInstanceProfile: !Ref AlluxioInstanceProfile
      KeyName: !Ref keypairName
      SecurityGroups: [!Ref AlluxioSecurityGroup]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !FindInMap [ClusterSizes, !Ref clusterSize, workerDiskSize]
            DeleteOnTermination: true
            VolumeType: gp2
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -x
            #
            # Alluxio Worker Node

            # The following command logs all stdout and stderr to a log file
            exec > >(tee /var/log/user-data.log|logger -t user-data -s >/dev/console) 2>&1

            statusFile=/tmp/statusfile

            # Download the helper scripts from the s3 bucket
            curl -sSLO ${HELPER_SCRIPTS_HTTP_LOCATION}/install-java.sh
            curl -sSLO ${HELPER_SCRIPTS_HTTP_LOCATION}/install-alluxio.sh
            curl -sSLO ${HELPER_SCRIPTS_HTTP_LOCATION}/install-prometheus.sh
            curl -sSLO ${HELPER_SCRIPTS_HTTP_LOCATION}/install-prometheus-node-exporter.sh
            curl -sSLO ${HELPER_SCRIPTS_HTTP_LOCATION}/install-grafana.sh
            if [ "$?" -ne "0" ]; then
              err_msg="Unable to download helper scripts from $HELPER_SCRIPTS_HTTP_LOCATION/"
              echo "{ \"Status\" : \"FAILURE\", \"UniqueId\" : \"${AWS::StackName}\", \"Data\" : \"Failed\", \"Reason\" : \"$err_msg\" }" > $statusFile
               curl -T $statusFile '${AvailabilityWaitHandle}'
               exit -1
            fi

            # Check if this is a single node cluster
            if [ ${WORKER_COUNT} == 0 ]; then
              echo "Single EC2 instance being staged"
            else
              echo "Multiple EC2 instances being staged"
            fi

            # Install Java 
            bash ./install-java.sh > /var/log/install-java.log 2>&1

            # Install Prometheus node_exporter for basic mem, cpu, disk, network stats
            bash ./install-prometheus-node-exporter.sh > /var/log/install-prometheus-node-exporter.log 2>&1

            # Create variables to be passed to scripts
            # Note: only use the IMDSv2 method, becuase the IMDSv1 is usually disabled
            # Get a token that lasts for 6 hours
            IMDSv2_TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
            THIS_INSTANCE_ID=$(curl -H "X-aws-ec2-metadata-token: $IMDSv2_TOKEN" http://instance-data/latest/meta-data/instance-id)
            THIS_IP_ADDRESS=$(curl -H "X-aws-ec2-metadata-token: $IMDSv2_TOKEN" http://instance-data/latest/meta-data/local-ipv4)
            THIS_NODE_TYPE=$(aws ec2 --region ${AWS::Region} describe-instances --instance-ids $THIS_INSTANCE_ID --query 'Reservations[].Instances[].Tags[?Key==`alluxio-node-type`].Value[]' --output text)

            # Install Alluxio
            echo "bash ./install-alluxio.sh $THIS_NODE_TYPE ${AWS::StackName} ${AWS::Region} ${ALLUXIO_S3_BUCKET_NAME} ${ALLUXIO_DOWNLOAD_URL} ${ALLUXIO_LICENSE_DOWNLOAD_URL} ${MASTER_HEAP_MEMORY_SIZE} ${WORKER_HEAP_MEMORY_SIZE} ${WORKER_COUNT}" 
            bash ./install-alluxio.sh "$THIS_NODE_TYPE" "${AWS::StackName}" "${AWS::Region}" "${ALLUXIO_S3_BUCKET_NAME}" "${ALLUXIO_DOWNLOAD_URL}" "${ALLUXIO_LICENSE_DOWNLOAD_URL}" "${MASTER_HEAP_MEMORY_SIZE}" "${WORKER_HEAP_MEMORY_SIZE}" "${WORKER_COUNT}" > /var/log/install-alluxio.log 2>&1

            if [ "$?" -ne 0 ]; then
              errmsg=" Script install-alluxio.sh failed. See log file at /var/log/install-alluxio.log." 
              echo " $errmsg"
              echo "{ \"Status\" : \"FAILURE\", \"UniqueId\" : \"${AWS::StackName}\", \"Data\" : \"Failed\", \"Reason\" : \"$errmsg\" }" > $statusFile
              curl -T $statusFile '${AvailabilityWaitHandle}'
              exit -1
            fi

            # Finalize install, send back status
            #
            until curl -Iks http://localhost:30000; do
              echo "Waiting for Alluxio worker node Web UI availability"
              sleep 5
            done

            echo "{ \"Status\" : \"SUCCESS\", \"UniqueId\" : \"${AWS::StackName}\", \"Data\" : \"Ready\", \"Reason\" : \"Website Available\" }" > $statusFile
            curl -T $statusFile '${AvailabilityWaitHandle}'
            #aws cloudformation --region ${AWS::Region} signal-resource --stack-name ${AWS::StackName} --logical-resource-id AvailabilityWaitCondition --unique-id ${AWS::StackName} --status SUCCESS

          - HELPER_SCRIPTS_HTTP_LOCATION: !Ref helperScriptsHttpLocation
            INSTALLER_DOWNLOAD_URL: !FindInMap [ Custom, Variables, "INSTALLERURL"]
            MEMORY_SIZE: !FindInMap [ClusterSizes, !Ref clusterSize, masterMaxMemory]
            ALLUXIO_S3_BUCKET_NAME: !Ref alluxioS3BucketName
            MASTER_COUNT: !FindInMap [ClusterSizes, !Ref clusterSize, masterCount]
            WORKER_COUNT: !FindInMap [ClusterSizes, !Ref clusterSize, workerCount]
            ALLUXIO_LICENSE_DOWNLOAD_URL: !Ref alluxioLicenseDownloadUrl
            MASTER_HEAP_MEMORY_SIZE: !FindInMap [ClusterSizes, !Ref clusterSize, masterHeapSizeGb]
            WORKER_HEAP_MEMORY_SIZE: !FindInMap [ClusterSizes, !Ref clusterSize, workerHeapSizeGb]

  AlluxioWorkerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: AlluxioWorkerLC
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName", Alluxio-Worker]]
          PropagateAtLaunch: true
          ResourceType: "auto-scaling-group"
          ResourceId: !Ref "AWS::StackName"
      LaunchConfigurationName: !Ref AlluxioWorkerLC
      VPCZoneIdentifier: [!If [CreateVPC, !Ref PublicSubnet, !Ref useSubnet]]
      DesiredCapacity: !FindInMap [ClusterSizes, !Ref clusterSize, workerCount]
      MaxSize: !FindInMap [ClusterSizes, !Ref clusterSize, workerCount]
      MinSize: !FindInMap [ClusterSizes, !Ref clusterSize, workerCount]

  AlluxioMonitor:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: alluxio-node-type
          Value: "MONITOR"
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName", "Alluxio-Monitor"]]
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      KeyName: !Ref keypairName
      InstanceType: !FindInMap [ClusterSizes, !Ref clusterSize, monitorInstanceType]
      IamInstanceProfile: !Ref AlluxioInstanceProfile
      NetworkInterfaces:
        - DeleteOnTermination: "true"
          AssociatePublicIpAddress: "true"
          DeviceIndex: 0
          SubnetId: !If [CreateVPC, !Ref PublicSubnet, !Ref useSubnet]
          GroupSet: [!Ref AlluxioSecurityGroup]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !FindInMap [ClusterSizes, !Ref clusterSize, monitorDiskSize]
            DeleteOnTermination: true
            VolumeType: gp2
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -x
            #
            # Alluxio Monitor Node (Prometheus and Grafana)

            # The following command logs all stdout and stderr to a log file
            exec > >(tee /var/log/user-data.log|logger -t user-data -s >/dev/console) 2>&1

            statusFile=/tmp/statusfile

            # Install Prometheus
            groupadd --system prometheus
            useradd -s /sbin/nologin --system -g prometheus prometheus
            curl -L -O https://github.com/prometheus/prometheus/releases/download/v2.36.0/prometheus-2.36.0.linux-amd64.tar.gz
            tar xvf prometheus-*.tar.gz
            cd prometheus-*.linux-amd64/
            mv prometheus promtool /usr/local/bin/
            mkdir -p /etc/prometheus
            mv prometheus.yml  /etc/prometheus/prometheus.yml.template
            mv consoles/ console_libraries/ /etc/prometheus/
            cd ..
            rm -rf prometheus-*
            
            cat <<EOF > /etc/prometheus/prometheus.yml
            global:
              scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
              evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
              # scrape_timeout is set to the global default (10s).
            
            # Alertmanager configuration
            alerting:
              alertmanagers:
              - static_configs:
                - targets:
                  # - alertmanager:9093
            
            # Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
            rule_files:
              # - "first_rules.yml"
              # - "second_rules.yml"
            
            # A scrape configuration containing exactly one endpoint to scrape:
            
            scrape_configs:
              - job_name: node
                static_configs:
                - targets: [ {{MASTER_NODE_EXPORTER_URLS}}, {{WORKER_NODE_EXPORTER_URLS}}

              - job_name: "alluxio master"
                metrics_path: '/metrics/prometheus/'
                static_configs:
                - targets: [ {{MASTER_METRICS_URLS}} ]
            
              - job_name: "alluxio worker"
                metrics_path: '/metrics/prometheus/'
                static_configs:
                - targets: [ {{WORKER_METRICS_URLS}} ]
            EOF
            
            # Setup the alluxio master node hostnames in prometheus.yml file
            
            instance_ids=$(aws ec2 --region ${AWS::Region} describe-instances --query 'Reservations[*].Instances[*].InstanceId' --filters "Name=tag-key,Values=aws:cloudformation:stack-name" "Name=tag-value,Values=${AWS::StackName}" --output=text | tr '\n' ' ')

            master_metrics_urls=""
            worker_metrics_urls=""
            for next_instance_id in $instance_ids
            do
              NODE_TYPE=$(aws ec2 --region ${AWS::Region} describe-instances --instance-ids $next_instance_id --query 'Reservations[].Instances[].Tags[?Key==`alluxio-node-type`].Value[]' --output text)
              PRIVATE_IP_ADDRESS=$(aws ec2 --region ${AWS::Region} describe-instances --query 'Reservations[*].Instances[*].PrivateIpAddress' --instance-ids $next_instance_id --output=text)
              FQDN=$(aws ec2 --region ${AWS::Region} describe-instances --query 'Reservations[*].Instances[*].PrivateDnsName' --instance-ids $next_instance_id --output=text)

              # Get the master and worker node_exporter urls (i.e. master1:9100,master2:9100, master3:9100)
              if [ "$NODE_TYPE" == "MASTER" ]; then
                if $master_metrics_urls != ""; then $master_metrics_urls+=","; fi
                master_metrics_urls+= "\'$FQDN:9100\'" 
              elif [ "$NODE_TYPE" == "WORKER" ]; then
                if $worker_metrics_urls != ""; then $worker_metrics_urls+=","; fi
                worker_metrics_urls+= "\'$FQDN:9100\'" 
              fi

              # Get the master and worker metrics urls (i.e. master1:19999,master2:19999, master3:19999)
              if [ "$NODE_TYPE" == "MASTER" ]; then
                if $master_metrics_urls != ""; then $master_metrics_urls+=","; fi
                master_metrics_urls+= "\'$FQDN:19999\'" 
              elif [ "$NODE_TYPE" == "WORKER" ]; then
                if $worker_metrics_urls != ""; then $worker_metrics_urls+=","; fi
                worker_metrics_urls+= "\'$FQDN:29999\'" 
              fi
            done

            # Add private hostname to prometheus.yml file
            sed -i "s/{{MASTER_METRICS_URLS}}/$master_metrics_urls/g" /etc/prometheus/prometheus.yml
            sed -i "s/{{WORKER_METRICS_URLS}}/$worker_metrics_urls/g" /etc/prometheus/prometheus.yml

            # Setup the systemd service
            cat <<EOF > /etc/systemd/system/prometheus.service
            [Unit]
            Description=Prometheus
            Documentation=https://prometheus.io/docs/introduction/overview/
            Wants=network-online.target
            After=network-online.target
            
            [Service]
            Type=simple
            Environment="GOMAXPROCS=4"
            User=prometheus
            Group=prometheus
            ExecReload=/bin/kill -HUP $MAINPID
            ExecStart=/usr/local/bin/prometheus \
              --config.file=/etc/prometheus/prometheus.yml \
              --storage.tsdb.path=/var/lib/prometheus \
              --web.console.templates=/etc/prometheus/consoles \
              --web.console.libraries=/etc/prometheus/console_libraries \
              --web.listen-address=0.0.0.0:9090 \
              --web.external-url=
            
            SyslogIdentifier=prometheus
            Restart=always
            
            [Install]
            WantedBy=multi-user.target
            EOF
            
            mkdir -p /var/lib/prometheus/
            chown -R prometheus:prometheus /var/lib/prometheus/
            systemctl daemon-reload
            systemctl start prometheus
            systemctl enable prometheus
            systemctl status prometheus

            # Install Grafana

            cat <<EOF > /etc/yum.repos.d/grafana.repo
            [grafana]
            name=grafana
            baseurl=https://packages.grafana.com/oss/rpm
            repo_gpgcheck=1
            enabled=1
            gpgcheck=1
            gpgkey=https://packages.grafana.com/gpg.key
            sslverify=1
            sslcacert=/etc/pki/tls/certs/ca-bundle.crt
            EOF
            
            yum -y install grafana

            # Setup default data source as prometheus
            cat <<EOF > /etc/grafana/provisioning/datasources/default.yaml
            apiVersion: 1
            
            datasources:
              - name: Prometheus
                type: prometheus
            EOF
            
            cat <<EOF > /etc/grafana/provisioning/datasources/datasources.yaml
            apiVersion: 1
            
            datasources:
              # <string, required> name of the datasource. Required
              - name: Prometheus
                type: prometheus
                access: proxy
                orgId: 1
                uid: 'KaXNuaQ7z'
                url: 'http://localhost:9090'
                user:
                database:
                basicAuth: false
                basicAuthUser:
                basicAuthPassword:
                withCredentials:
                isDefault: true
                jsonData:
                  httpMethod: 'POST'
                  tlsAuth: false
                  tlsAuthWithCACert: false
                secureJsonData:
                  tlsCACert: '...'
                  tlsClientCert: '...'
                  tlsClientKey: '...'
                  password:
                  basicAuthPassword:
                version: 1
                editable: false
            EOF

            systemctl restart grafana-server
            systemctl status grafana-server

            # Point your web browser to <monitor host>:3000
            # Default userid and password: admin/admin

          - ALLUXIO_S3_BUCKET_NAME: !Ref alluxioS3BucketName

Outputs:
  AlluxioMasterASG:
    Description: Alluxio Master Autoscaling Group
    Value: 
      Ref: "AlluxioMasterASG"

  AlluxioMasterLC:
    Description: Alluxio Master Launch Configuration
    Value: 
      Ref: "AlluxioMasterLC"
